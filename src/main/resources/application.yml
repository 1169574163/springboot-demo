# server 配置
server:
  port: 8080

# spring 配置
spring:
  datasource:
    # JDBC 配置
    url: jdbc:mysql://127.0.0.1:3306/hc_test?useUnicode=true&characterEncoding=UTF-8&zeroDateTimeBehavior=convertToNull&useSSL=false
    username: root
    password: 12345678
    driver-class-name: com.mysql.jdbc.Driver
    # druid 连接池配置
    druid:
      # 如果有initialSize数量较多时，打开会加快应用启动时间
      async-init: false
      # 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时[0]
      initial-size: 1
      # 最大连接池数量[8]
      # maxIdle 已经不再使用，配置了也没效果[8]
      max-active: 20
      # 最小连接池数量
      min-idle: 5
      # 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，
      # 如果需要可以通过配置useUnfairLock属性为true使用非公平锁。
      max-wait: 60000
      # 有两个含义：
      # 1) Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接。
      # 2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明
      time-between-eviction-runs-millis: 60000
      # 连接保持空闲而不被驱逐的最小时间
      min-evictable-idle-time-millis: 300000
      # 连接池配置-一个连接在池中最大生存的时间，单位是毫秒
      max-evictable-idle-time-millis: 600000
      # 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，
      # 比如说oracle。在mysql下建议关闭。[false]
      pool-prepared-statements: false
      # 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。
      # 在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100[-1]
      max-pool-prepared-statement-per-connection-size: -1
      # 用来检测连接是否有效的sql，要求是一个查询语句，常用select 'x'。
      # 如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会起作用。
      validation-query: select 'hushijie'
      # 单位：秒，检测连接是否有效的超时时间。底层调用jdbc Statement对象的void setQueryTimeout(int seconds)方法
      validation-query-timeout: 10000
      # 申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
      # 建议配置为true，不影响性能，并且保证安全性。[false]
      test-while-idle: true
      # 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。[true]
      test-on-borrow: false
      # 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。[false]
      test-on-return: false
      # 连接池中的minIdle数量以内的连接，空闲时间超过minEvictableIdleTimeMillis，则会执行keepAlive操作。
      keep-alive: true
      # 属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：
      # 监控统计用的filter:stat、日志用的filter:log4j、防御sql注入的filter:wall
      filters: stat,wall,log4j2
      filter:
        stat:
          enabled: true
        wall:
          enabled: true
        log4j2:
          enabled: true
          statement-create-after-log-enabled: false
          statement-close-after-log-enabled: false
          result-set-open-after-log-enabled: false
          result-set-close-after-log-enabled: false
      # 打开监控页面
      stat-view-servlet:
        enabled: true
        login-username: root
        login-password: 12345678
        url-pattern: /druid/*

  # redis 配置
  redis:
    host: 127.0.0.1
    port: 6379
    password:
    database: 0
    timeout: 10000
    jedis:
      pool:
        min-idle: 1
        max-idle: 8
        max-active: 8
        max-wait: 10000
#    lettuce:
#      pool:
#        min-idle: 1
#        max-idle: 8
#        max-active: 8
#        max-wait: 10000

# MyBatis Plus 配置
mybatis-plus:
#  # MyBatis 配置文件
#  config-location: classpath:mybatis/mybatis-config.xml
  # MyBatis Mapper 所对应的 XML 文件位置[Maven多模块项目的扫描路径需以 classpath*: 开头（即加载多个 jar 包下的 XML 文件）]
  mapper-locations: classpath*:mybatis/mapper/*.xml
#  # TypeHandler 扫描路径，如果配置了该属性，SqlSessionFactoryBean 会把该包下面的类注册为对应的 TypeHandler
#  type-handlers-package: com.baomidou.mybatisplus.extension.handlers
  # 枚举类 扫描路径
  type-enums-package: com.hushijie.springboottest.**.model.enums
  # MyBatis-Plus 全局策略配置
  global-config:
    # 是否自动刷新 Mapper 对应的 XML 文件
    refresh: true
    # DB 策略配置
    db-config:
      # 全局默认主键类型
      id-type: auto
      # 逻辑已删除值[默认值：1]
      logic-delete-value: 1
      # 逻辑未删除值[默认值：0]
      logic-not-delete-value: 0
  configuration:
    map-underscore-to-camel-case: true

# 日志配置
logging:
  config: classpath:log4j2.xml
